{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","newItem","list","todoValue","id","Date","now","value","isDone","this","push","setState","updated","filter","item","input","className","type","placeholder","required","onChange","e","updateInput","target","onClick","addItem","disabled","length","map","key","name","checked","deleteItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,kC,wJC8F5BC,G,wBAvFX,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,QAAU,GACVC,KAAK,IAJS,E,qEASVC,GACN,GAAiB,KAAdA,EAAiB,CAClB,IAAMF,EAAU,CACdG,GAAGC,KAAKC,MACRC,MAAMJ,EACNK,QAAO,GAEHN,EAAI,YAAOO,KAAKT,MAAME,MACnBA,EAAKQ,KAAKT,GACVQ,KAAKE,SAAS,CACZT,OACAD,QAAQ,Q,iCAIRG,GACT,IACMQ,EADI,YAAOH,KAAKT,MAAME,MACPW,QAAO,SAAAC,GAAI,OAAIA,EAAKV,KAAOA,KACjDK,KAAKE,SAAS,CACPT,KAAKU,M,kCAKFG,GACVN,KAAKE,SAAS,CAACV,QAAQc,M,+BAGrB,IAAD,OACN,OACE,6BACE,wBAAIC,UAAU,QAAd,oBAIF,yBAAKA,UAAU,aAAf,qBAEE,6BACA,2BACAC,KAAK,OAAOD,UAAU,aAAaE,YAAY,sBAC7CC,UAAQ,EACRZ,MAASE,KAAKT,MAAMC,QACpBmB,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAYD,EAAEE,OAAOhB,UAE1C,4BACAS,UAAU,UACVQ,QAAS,kBAAK,EAAKC,QAAQ,EAAKzB,MAAMC,UACtCyB,UAAWjB,KAAKT,MAAMC,QAAQ0B,QAH9B,YAIA,yBAAKX,UAAU,QACb,4BACGP,KAAKT,MAAME,KAAK0B,KAAI,SAAAd,GACnB,OACE,wBAAIe,IAAKf,EAAKV,IACZ,2BACAa,KAAK,WAAWa,KAAK,SAASC,QAASjB,EAAKN,OAC5CY,SAAU,eACV,uBAAGJ,UAAU,YAAYF,EAAKP,OAC9B,4BAAQS,UAAU,MAClBQ,QAAS,kBAAI,EAAKQ,WAAWlB,EAAKV,MADlC,cAKN,4BACG,2BAAOa,KAAK,WAAYD,UAAU,aAAaZ,GAAG,KAClD,uBAAGY,UAAU,UAAb,0BACD,4BAAQA,UAAU,OAAlB,mB,GA5EGiB,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f2ef89c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport \"./App.css\";\n\n\nclass App extends React.Component{\n \n    constructor(props){\n      super(props);\n      this.state = {\n        newItem : \"\",\n        list:[]\n      }\n       \n    }\n\n    addItem(todoValue){\n      if(todoValue !== \"\"){\n        const newItem = {\n          id:Date.now(),\n          value:todoValue,\n          isDone:false\n        };\n        const list = [...this.state.list];\n                 list.push(newItem);\n                 this.setState({\n                   list,\n                   newItem:\"\"\n                 })\n      }\n    }\n        deleteItem(id){\n          const list = [...this.state.list];\n          const updated = list.filter(item => item.id !== id);\n         this.setState({\n                list:updated\n\n         })\n\n        }\n       updateInput(input){\n         this.setState({newItem:input});\n       }\n\n  render(){\n    return(\n      <div>\n        <h1 className=\"head\">Todo Application</h1>\n        {/* <img  src={logo} className=\"logo\" width=\"100\" width=\"100\"/>\n       */}\n\n      <div className=\"container\">\n        Write your task...\n        <br/>\n        <input \n        type=\"text\" className=\"input-text\" placeholder=\" write a todo..here\"\n          required \n          value = {this.state.newItem}\n          onChange={e => this.updateInput(e.target.value)}\n         />\n         <button\n         className=\"add-btn\"\n         onClick={()=> this.addItem(this.state.newItem)}\n         disabled={!this.state.newItem.length}>Add Todo</button>\n         <div className=\"list\">\n           <ul>\n             {this.state.list.map(item => {\n               return(\n                 <li key={item.id}> \n                   <input \n                   type=\"checkbox\" name=\"isDone\" checked={item.isDone}\n                   onChange={() => {}} />\n                   <i className=\"addValue\">{item.value}</i>\n                   <button className=\"btn\"\n                   onClick={()=>this.deleteItem(item.id)}>Delete</button>\n                 </li>\n               );\n             })}\n             <li>\n                <input type=\"checkbox\"  className=\"btn-delete\" id=\"\"/>\n                <i className=\"delete\">Record youtube videos </i>\n               <button className=\"btn\">Delete</button>\n\n             </li>\n           </ul>\n         </div>\n      </div>\n      </div> \n    )\n  }\n\n\n\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//Boostrap imported\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}